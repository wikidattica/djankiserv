version: '3.7'

services:
  django:
    image: wikidattica/djankiserv:0.1
    # uncomment if you want to build yourself
    #build: ../src
    restart: unless-stopped
    environment:
      - ENV
      - DJANKISERV_MAINDB_NAME
      - DJANKISERV_MAINDB_USER
      - DJANKISERV_MAINDB_PASSWORD
      - DJANKISERV_MAINDB_HOST
      - DJANKISERV_USERDB_NAME
      - DJANKISERV_USERDB_USER
      - DJANKISERV_USERDB_PASSWORD
      - DJANKISERV_USERDB_HOST
      - DJANKISERV_DATA_ROOT
      - DJANKISERV_DEBUG
      - DJANKISERV_SECRET_KEY
      - DJANKISERV_ALLOWED_HOSTS
    ports:
      - "8001:8000"
    volumes:
      - ./logs/uwsgi:/var/log/uwsgi
      - ./data/anki:/code/data
      - ./.ipython:/var/www/.ipython
    networks:
      django:
        # aliases:
        #   - djankiserv
    depends_on:
      - postgresql

    # these labels expose the container to traefik 2+ making it a breeze
    # to deploy it behind a load balancer that handles ssl via letsencrypt
    labels:
       traefik.enable: true
       traefik.http.routers.dj.rule: Host(`${DJANKISERV_HOST}`)
       traefik.http.routers.dj.entrypoints: web
       traefik.http.routers.dj.service: djs
       traefik.http.routers.dj.middlewares: do-buffering

       traefik.http.routers.djs.rule: Host(`${DJANKISERV_HOST}`)
       traefik.http.routers.djs.entrypoints: web-secured
       traefik.http.routers.djs.tls.certresolver: leresolver
       traefik.http.routers.djs.service: djs

       traefik.http.services.djs.loadbalancer.server.port: 8000
       traefik.http.middlewares.do-buffering.buffering.memRequestBodyBytes: 20000000

  postgresql:
    image:  postgres:13.1
    restart: unless-stopped
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - DJANKISERV_MAINDB_NAME
      - DJANKISERV_MAINDB_USER
      - DJANKISERV_MAINDB_PASSWORD
      - DJANKISERV_USERDB_NAME
      - DJANKISERV_USERDB_USER
      - DJANKISERV_USERDB_PASSWORD
    volumes:
      - ./conf/sql:/docker-entrypoint-initdb.d
      - ./data/postgresql:/var/lib/postgresql/data
    networks:
      - django

  mitmweb:
    image: mitmproxy/mitmproxy
    tty: true
    ports:
      - "8080:8080"  # proxy
      - "8081:8081"  # web-interface
    command: mitmweb --web-host 0.0.0.0 --no-web-open-browser -p 8080 --mode reverse:http://django:8000/
    #command: mitmweb --web-host 0.0.0.0 --no-web-open-browser -p 8080 --mode reverse:http://djankiserv/
    networks:
      - django

    # labels:
    #    traefik.enable: true
    #    traefik.http.routers.mitm.rule: Host(`${DJANKISERV_HOST}`)
    #    traefik.http.routers.mitm.priority: 10
    #    traefik.http.routers.mitm.entrypoints: web
    #    traefik.http.routers.mitm.service: mitms
    #    traefik.http.routers.mitm.middlewares: do-buffering

    #    traefik.http.routers.mitms.rule: Host(`${DJANKISERV_HOST}`)
    #    traefik.http.routers.mitms.entrypoints: web-secured
    #    traefik.http.routers.mitms.tls.certresolver: leresolver
    #    traefik.http.routers.mitms.service: mitms
    #    traefik.http.routers.mitms.middlewares: do-buffering

    #    traefik.http.services.mitms.loadbalancer.server.port: 8080
    #    traefik.http.middlewares.do-buffering.buffering.memRequestBodyBytes: 20000000

  nginx:
    ## just needed to allow transfer-encoding: chuncked (needed by anki's /upload)
    image: nginx
    volumes:
      - ./conf/nginx:/etc/nginx/templates
      - ./logs/nginx:/var/log/nginx
    ports:
      - "7999:80"  # proxy
    networks:
      django:
        aliases:
          - djankiserv
    depends_on:
      - django

    environment:
      - NGINX_HOST=djankiserv
      - NGINX_PORT=80

  ngrock:
    image: wernight/ngrok
    command: ngrok http django:8000
    ports:
      - "4040:4040"  # proxy
    networks:
      - django
    depends_on:
      - django


  traefik:
    image: traefik:v2.3.1
    restart: always
    container_name: traefik
    ports:
      - "8090:80" # <== http
      - "443:443" # <== https
    command:
    #### These are the CLI commands that will configure Traefik and tell it how to work! ####
      - --api.dashboard=true # <== Enabling the dashboard to view services, middlewares, routers, etc...
      ## Log Settings (options: ERROR, DEBUG, PANIC, FATAL, WARN, INFO) - https://docs.traefik.io/observability/logs/ ##
      - --log.level=INFO # <== Setting the level of the logs from traefik
      - --accessLog.filePath=/logs/access.log
      - --log.filePath=/logs/traefik.log
      ## Provider Settings - https://docs.traefik.io/providers/docker/#provider-configuration ##
      - --providers.docker=true # <== Enabling docker as the provider for traefik
      - --providers.docker.exposedbydefault=false # <== Don't expose every container to traefik, only expose enabled ones
      #- --providers.file.filename=/dynamic.yaml # <== Referring to a dynamic configuration file
      - --providers.docker.network=web # <== Operate on the docker network named web
      ## Entrypoints Settings - https://docs.traefik.io/routing/entrypoints/#configuration ##
      - --entrypoints.web.address=:80 # <== Defining an entrypoint for port :80 named web
      - --entrypoints.web-secured.address=:443 # <== Defining an entrypoint for https on port :443 named web-secured
      #- --entrypoints.entrypoints.dashboard.auth.basic.users=admin:$apr1$e4Q4jy0E$0SIFCUvMdouab8YcDzed7.
      ## Certificate Settings (Let's Encrypt) -  https://docs.traefik.io/https/acme/#configuration-examples ##
      - --certificatesresolvers.leresolver.acme.tlschallenge=true # <== Enable TLS-ALPN-01 to generate and renew ACME certs
      - --certificatesresolvers.leresolver.acme.email=sandro.dentella@gmail.com # <== Setting email for certs
      - --certificatesresolvers.leresolver.acme.storage=/letsencrypt/acme.json # <== Defining acme file to store cert information
    volumes:
      - ./logs/traefik:/logs
      - ./conf/traefik:/letsencrypt # <== Volume for certs (TLS)
      - /var/run/docker.sock:/var/run/docker.sock # <== Volume for docker admin
      #- ./dynamic.yaml:/dynamic.yaml # <== Volume for dynamic conf file, **ref: line 27
    networks:
      - django # <== Placing traefik on the network named web, to access containers on this network
    depends_on:
      - django
    labels:
    #### Labels define the behavior and rules of the traefik proxy for this container ####
      - "traefik.enable=true" # <== Enable traefik on itself to view dashboard and assign subdomain to view it
      - "traefik.http.routers.api.rule=Host(`${TRAEFIK_HOST}`)" # <== Setting the domain for the dashboard
      - "traefik.http.routers.api.service=api@internal" # <== Enabling the api to be a service to access
      - "traefik.http.routers.api.middlewares=redirect-to-https"
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_HOST}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.tls.certresolver=leresolver"
    depends_on:
      - django

networks:
 web:
   external: true
 backend:
   external: false

networks:
  django:
#  web:
#    external: true
